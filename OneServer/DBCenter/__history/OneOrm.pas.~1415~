unit OneOrm;

interface

uses
  system.Generics.Collections, system.Variants, system.SysUtils, system.Classes,
  OneZTManage, FireDAC.Comp.Client, system.Rtti, Data.DB, system.NetEncoding, system.TypInfo;

type
  emOneOrmCmd = (cmdNull, cmdQuery, cmdSelect, cmdUpdate, cmdDelete, cmdInsert);

  IOneOrmCmd<T: class> = interface
    ['{9609C654-2947-4F36-A978-78BF1DD03948}']
    function ToCount(): integer;
    function ToFirst(): T;
    function ToLast(): T;
    function ToList(): TList<T>;
    function ToObject(): T;
    function ToExecCommand(): integer;
  end;

  IOneOrm<T: class> = interface
    function ZTCode(QZTCode: string): IOneOrm<T>;
    function SetTableName(QTableName: string): IOneOrm<T>;
    function SetPrimaryKey(QFieldName: string): IOneOrm<T>;
    function SetPage(iPageIndex: integer; iPageSize: integer): IOneOrm<T>;
    // 执行SQL
    function Query(QSQL: string; QParams: array of Variant): IOneOrmCmd<T>;
    function Select(QTableName: string = ''): IOneOrm<T>;
    function Inserter(QValue: T): IOneOrm<T>; overload;
    function Update(QValue: T): IOneOrm<T>; overload;
    function Delete(QValue: T): IOneOrm<T>; overload;
    function Inserter(QValues: TList<T>): IOneOrm<T>; overload;
    function Update(QValues: TList<T>): IOneOrm<T>; overload;
    function Delete(QValues: TList<T>): IOneOrm<T>; overload;
    // 字段
    function Fields(QFields: array of string): IOneOrm<T>;
    // 更新 set fiels,value
    function SetField(QFileName: string; QValue: Variant): IOneOrm<T>;
    //
    function where(QWhereSQL: string; QParams: array of Variant): IOneOrm<T>;
    //
    function toCmd(): IOneOrmCmd<T>;
  end;

  TOneOrm<T: class, constructor> = class(TInterfacedObject, IOneOrm<T>, IOneOrmCmd<T>)
  private
    FZTCode: string;
    FCmd: emOneOrmCmd;
    // 最终组装的SQL语句
    FCmdSQL: string;
    FCmdParams: array of Variant;
    //
    FTableName: string;
    FPrimaryKey: string;
    FPageIndex: integer;
    FPageSize: integer;
    // Query原生SQL用法
    FQuerySQL: string;
    FQueryParams: array of Variant;
    // 查询的字段或update set字段
    FFields: array of string;
    // update set value值
    FFieldValues: array of Variant;
    // where 条件SQL
    FWhereSQLs: array of string;
    // where 条件参数值
    FWhereSQLParams: array of Variant;
    //
    FErrMsg: string;
  private
    function buildSQL(): boolean;
  public
    constructor Create;
    class function Start(): IOneOrm<T>; static;
  public
    //
    function ZTCode(QZTCode: string): IOneOrm<T>;
    function SetTableName(QTableName: string): IOneOrm<T>;
    function SetPrimaryKey(QFieldName: string): IOneOrm<T>;
    function SetPage(iPageIndex: integer; iPageSize: integer): IOneOrm<T>;
    // 执行原生SQL
    function Query(QSQL: string; QParams: array of Variant): IOneOrmCmd<T>; Overload;
    // 执行SQL
    function Select(QTableName: string = ''): IOneOrm<T>;
    // 插入语句，插入单个
    function Inserter(QValue: T): IOneOrm<T>; overload;
    // 更新语句,更新单个
    function Update(QValue: T): IOneOrm<T>; overload;
    // 删除语句,删除单个
    function Delete(QValue: T): IOneOrm<T>; overload;
    // 插入语句,批量插入
    function Inserter(QValues: TList<T>): IOneOrm<T>; overload;
    // 更新语句,批量更新
    function Update(QValues: TList<T>): IOneOrm<T>; overload;
    // 删除语句,批量删除
    function Delete(QValues: TList<T>): IOneOrm<T>; overload;
    // 字段
    function Fields(QFields: array of string): IOneOrm<T>;
    // 更新 set fiels,value
    function SetField(QFileName: string; QValue: Variant): IOneOrm<T>;
    //
    function where(QWhereSQL: string; QParams: array of Variant): IOneOrm<T>;
    //
    function toCmd(): IOneOrmCmd<T>;
    //
    function ToCount(): integer;
    function ToFirst(): T;
    function ToLast(): T;
    function ToList(): TList<T>;
    function ToObject(): T;
    function ToExecCommand(): integer;
    //
    function DataSetToList(QDataSet: TFDMemtable): TList<T>;
  end;

var
  // OneGlobal会初使化赋值
  unit_OrmZTManage: TOneZTManage = nil;

implementation

uses OneDataInfo, OneOrmRtti;

class function TOneOrm<T>.Start(): IOneOrm<T>;
begin
  result := TOneOrm<T>.Create;
end;

constructor TOneOrm<T>.Create;
begin
  inherited Create;
  self.FPageIndex := -1;
  self.FPageSize := -1;
end;

function TOneOrm<T>.ZTCode(QZTCode: string): IOneOrm<T>;
begin
  result := self;
  self.FZTCode := QZTCode;
end;

function TOneOrm<T>.SetTableName(QTableName: string): IOneOrm<T>;
begin
  result := self;
  self.FTableName := QTableName;
end;

function TOneOrm<T>.SetPrimaryKey(QFieldName: string): IOneOrm<T>;
begin
  result := self;
  self.FPrimaryKey := QFieldName;
end;

function TOneOrm<T>.SetPage(iPageIndex: integer; iPageSize: integer): IOneOrm<T>;
begin
  result := self;
  self.FPageIndex := iPageIndex;
  self.FPageSize := iPageSize;
end;

function TOneOrm<T>.Query(QSQL: string; QParams: array of Variant): IOneOrmCmd<T>;
var
  iParam, iParamLen: integer;
begin
  result := self;
  self.FCmd := emOneOrmCmd.cmdQuery;
  self.FQuerySQL := QSQL;
  iParamLen := length(QParams);
  setLength(self.FQueryParams, iParamLen);
  for iParam := 0 to iParamLen - 1 do
  begin
    self.FQueryParams[iParam] := QParams[iParam];
  end;
end;

function TOneOrm<T>.Select(QTableName: string = ''): IOneOrm<T>;
begin
  result := self;
  self.FCmd := emOneOrmCmd.cmdSelect;
  self.FTableName := QTableName;
end;

function TOneOrm<T>.Inserter(QValue: T): IOneOrm<T>;
begin
  result := self;
  self.FCmd := emOneOrmCmd.cmdInsert;
end;

function TOneOrm<T>.Update(QValue: T): IOneOrm<T>;
begin
  result := self;
  self.FCmd := emOneOrmCmd.cmdUpdate;
end;

function TOneOrm<T>.Delete(QValue: T): IOneOrm<T>;
begin
  result := self;
  self.FCmd := emOneOrmCmd.cmdDelete;
end;

function TOneOrm<T>.Inserter(QValues: TList<T>): IOneOrm<T>;
begin
  result := self;
  self.FCmd := emOneOrmCmd.cmdInsert;
end;

function TOneOrm<T>.Update(QValues: TList<T>): IOneOrm<T>;
begin
  result := self;
  self.FCmd := emOneOrmCmd.cmdUpdate;
end;

function TOneOrm<T>.Delete(QValues: TList<T>): IOneOrm<T>;
begin
  result := self;
  self.FCmd := emOneOrmCmd.cmdDelete;
end;

function TOneOrm<T>.Fields(QFields: array of string): IOneOrm<T>;
var
  i, iSourceLen, iLen: integer;
begin
  result := self;
  iSourceLen := length(self.FFields);
  iLen := length(QFields);
  setLength(self.FFields, iSourceLen + iLen);
  for i := 0 to iLen - 1 do
  begin
    self.FFields[i + iSourceLen] := QFields[i];
  end;
end;

function TOneOrm<T>.SetField(QFileName: string; QValue: Variant): IOneOrm<T>;
var
  i, iLen, iValueLen: integer;
begin
  iLen := length(self.FFields) + 1;
  setLength(self.FFields, iLen);
  self.FFields[iLen - 1] := QFileName;
  //
  iValueLen := length(self.FFieldValues) + 1;
  setLength(self.FFieldValues, iValueLen);
  self.FFieldValues[iValueLen - 1] := QValue;
end;

function TOneOrm<T>.where(QWhereSQL: string; QParams: array of Variant): IOneOrm<T>;
var
  iParam, iSourceWhereLen, iSourceParamLen, iParamLen: integer;
begin
  result := self;
  iSourceWhereLen := length(FWhereSQLs);
  setLength(FWhereSQLs, iSourceWhereLen + 1);
  FWhereSQLs[iSourceWhereLen] := QWhereSQL;
  //
  iParamLen := length(QParams);
  if iParamLen = 0 then
    exit;
  iSourceParamLen := length(FWhereSQLParams);
  setLength(FWhereSQLParams, iSourceParamLen + iParamLen);
  for iParam := 0 to iParamLen - 1 do
  begin
    FWhereSQLParams[iParam + iSourceParamLen] := QParams[iParam];
  end;
end;

function TOneOrm<T>.toCmd(): IOneOrmCmd<T>;
begin
  result := self;
end;

function TOneOrm<T>.ToCount(): integer;
var
  LParams: TList<Variant>;
  iParam, iParamLen: integer;
begin
  if (self.FCmd <> emOneOrmCmd.cmdQuery) and (self.FCmd <> emOneOrmCmd.cmdSelect) then
  begin
    raise Exception.Create('只有查询才能统计总条数');
    exit;
  end;
end;

function TOneOrm<T>.ToFirst(): T;
begin

end;

function TOneOrm<T>.ToLast(): T;
begin

end;

function TOneOrm<T>.ToList(): TList<T>;
var
  lDataOpen: TOneDataOpen;
  lErrMsg: string;
  lDataSet: TFDMemtable;
begin
  result := nil;
  if unit_OrmZTManage = nil then
  begin
    raise Exception.Create('orm账套未初始化[unit_OrmZTManage]');
    exit;
  end;
  if (self.FCmd <> emOneOrmCmd.cmdQuery) and (self.FCmd <> emOneOrmCmd.cmdSelect) then
  begin
    raise Exception.Create('只有查询语句才能转化成对象列表');
    exit;
  end;
  if not self.buildSQL() then
  begin
    raise Exception.Create('组装SQL语句异常,原因:' + self.FErrMsg);
    exit;
  end;
  // 执行SQL获得数据集
  lDataSet := nil;
  lDataOpen := TOneDataOpen.Create;
  try
    lDataOpen.OpenSQL := self.FCmdSQL;
    lDataOpen.ZTCode := self.FZTCode;
    lDataOpen.PageIndex := self.FPageIndex;
    lDataOpen.PageSize := self.FPageSize;
    lDataSet := unit_OrmZTManage.OpenData(lDataOpen, self.FCmdParams, lErrMsg);
    if lDataSet = nil then
    begin
      raise Exception.Create(lErrMsg);
      exit;
    end;
    // 把数据集转成List
    result := self.DataSetToList(lDataSet)
  finally
    lDataOpen.Free;
    if lDataSet <> nil then
      lDataSet.Free;
  end;
end;

function TOneOrm<T>.ToObject(): T;
var
  lDataOpen: TOneDataOpen;
  lErrMsg: string;
  lDataSet: TFDMemtable;
  lList: TList<T>;
begin
  result := nil;
  if unit_OrmZTManage = nil then
  begin
    raise Exception.Create('orm账套未初始化[unit_OrmZTManage]');
    exit;
  end;
  if (self.FCmd <> emOneOrmCmd.cmdQuery) and (self.FCmd <> emOneOrmCmd.cmdSelect) then
  begin
    raise Exception.Create('只有查询语句才能转化成对象列表');
    exit;
  end;
  if not self.buildSQL() then
  begin
    raise Exception.Create('组装SQL语句异常,原因:' + self.FErrMsg);
    exit;
  end;
  // 执行SQL获得数据集
  lDataSet := nil;
  lDataOpen := TOneDataOpen.Create;
  try
    lDataOpen.OpenSQL := self.FCmdSQL;
    lDataOpen.ZTCode := self.FZTCode;
    lDataOpen.PageIndex := self.FPageIndex;
    lDataOpen.PageSize := self.FPageSize;
    lDataSet := unit_OrmZTManage.OpenData(lDataOpen, self.FCmdParams, lErrMsg);
    if lDataSet = nil then
    begin
      raise Exception.Create(lErrMsg);
      exit;
    end;
    if lDataSet.RecordCount = 0 then
    begin
      exit;
    end;
    if lDataSet.RecordCount > 1 then
    begin
      raise Exception.Create('返回的数据记录不是唯一的，请检查');
      exit;
    end;
    // 把数据集转成List
    lList := TList<T>.Create;
    try
      lList := self.DataSetToList(lDataSet);
      result := lList[0];
    finally
      lList.Clear;
      lList.Free;
    end;

  finally
    lDataOpen.Free;
    if lDataSet <> nil then
      lDataSet.Free;
  end;
end;

function TOneOrm<T>.ToExecCommand(): integer;
begin

end;

function TOneOrm<T>.buildSQL(): boolean;
var
  LParams: TList<Variant>;
  iField, iFieldLen, iParam, iParamLen: integer;
  lWhere: string;
  iWhere, iWhereLen: integer;
  lSQL: string;
begin
  result := false;
  self.FCmdSQL := '';
  setLength(self.FCmdParams, 0);
  self.FErrMsg := '';
  // 开始组装SQL
  LParams := TList<Variant>.Create;
  try
    self.FCmdSQL := '';
    if self.FCmd = emOneOrmCmd.cmdQuery then
    begin
      self.FCmdSQL := self.FQuerySQL;
      iParamLen := length(self.FQueryParams);
      for iParam := 0 to iParamLen - 1 do
      begin
        LParams.Add(self.FQueryParams[iParam]);
      end;
    end
    else if self.FCmd = emOneOrmCmd.cmdSelect then
    begin
      lSQL := ' select ';
      if self.FTableName = '' then
      begin
        // 通过返身获取结构名称当表名
      end;
      iFieldLen := length(self.FFields);
      if iFieldLen = 0 then
      begin
        lSQL := lSQL + ' * from ' + self.FTableName;
      end
      else
      begin
        //
        for iField := 0 to iFieldLen - 1 do
        begin
          lSQL := lSQL + ' ' + self.FFields[iField] + ' ';
          if iField < iFieldLen - 1 then
          begin
            lSQL := lSQL + ' , ';
          end;
        end;
        lSQL := lSQL + ' from ' + self.FTableName;
      end;
      // 组装 where条件
      // FWhereSQLs,FWhereSQLParams
      lSQL := lSQL + ' where 1=1 ';
      iWhereLen := length(self.FWhereSQLs);
      for iWhere := 0 to iWhereLen - 1 do
      begin
        //
        lWhere := self.FWhereSQLs[iWhere];
        lWhere := lWhere.Trim; // 去掉两边空格
        if lWhere.StartsWith('where ') then
        begin
          // 去掉where
          lWhere := lWhere.Substring(5);
          lSQL := lSQL + ' and ' + lWhere;
        end
        else if (not lWhere.StartsWith('and ')) and (not lWhere.StartsWith('or ')) then
        begin
          // 自动加个 and
          lSQL := lSQL + ' and ' + lWhere;
        end
        else
        begin
          lSQL := lSQL + ' ' + lWhere;
        end;
      end;
      iParamLen := length(self.FWhereSQLParams);
      for iParam := 0 to iParamLen - 1 do
      begin
        LParams.Add(self.FWhereSQLParams[iParam]);
      end;
    end
    else if self.FCmd = emOneOrmCmd.cmdInsert then
    begin
      lSQL := ' insert into ' + self.FTableName;
      iFieldLen := length(self.FFields);
      if iFieldLen > 0 then
      begin
        for iField := 0 to iFieldLen - 1 do
        begin

        end;
      end
      else
      begin

      end;
    end
    else if self.FCmd = emOneOrmCmd.cmdUpdate then
    begin

    end
    else if self.FCmd = emOneOrmCmd.cmdDelete then
    begin

    end;

    if self.FCmdSQL.Trim = '' then
    begin
      self.FErrMsg := 'SQL语句为空';
      exit;
    end;
    setLength(self.FCmdParams, LParams.Count);
    for iParam := 0 to LParams.Count - 1 do
    begin
      self.FCmdParams[iParam] := LParams[iParam];
    end;
    // 执行SQL语句
    result := True;
  finally
    LParams.Clear;
    LParams.Free;
  end;

end;

function TOneOrm<T>.DataSetToList(QDataSet: TFDMemtable): TList<T>;
var
  lOrmRtti: IOrmRtti;
  lOrmRttiItem: TOneOrmRttiItem;
  i: integer;
  lOrmFieldRttis: TList<TOneFieldRtti>;
  lDataFields: TDictionary<string, TField>;
  lOneFieldRtti: TOneFieldRtti;
  lRttiField: TRttiField;
  lRttiProperty: TRttiProperty;
  lTypeKind: TTypeKind;
  lField: TField;
  lFieldName: string;
  lTempT: T;
  tempStr: string;
  tempI: integer;
begin
  result := TList<T>.Create;
  // system.TypeInfo(T)
  lDataFields := TDictionary<string, TField>.Create;
  lOrmFieldRttis := TList<TOneFieldRtti>.Create;
  try
    // 字段
    for i := 0 to QDataSet.Fields.Count - 1 do
    begin
      lField := QDataSet.Fields[i];
      lDataFields.Add(lField.FieldName.ToLower, lField);
    end;
    lOrmRtti := TOneOrmRtti.GetInstance();
    lOrmRttiItem := lOrmRtti.GetOrmRtti(system.TypeInfo(T));
    // orm字段
    for i := 0 to lOrmRttiItem.Fields.Count - 1 do
    begin
      lFieldName := lOneFieldRtti.FDBFieldName;
      if lDataFields.ContainsKey(lFieldName) then
      begin
        lOrmFieldRttis.Add(lOrmRttiItem.Fields[i]);
      end;
    end;
    QDataSet.First;
    while not QDataSet.Eof do
    begin
      lTempT := T.Create;
      result.Add(lTempT);
      // for  lRttiType.GetFields do
      for i := 0 to lOrmFieldRttis.Count - 1 do
      begin
        lOneFieldRtti := lOrmRttiItem.Fields[i];
        // 这边要考虑很多的,比如不同类型的字段转化
        // tkUnknown, tkInteger, tkChar, tkEnumeration, tkFloat,
        // tkString, tkSet, tkClass, tkMethod, tkWChar, tkLString, tkWString,
        // tkVariant, tkArray, tkRecord, tkInterface, tkInt64, tkDynArray, tkUString,
        // tkClassRef, tkPointer, tkProcedure, tkMRecord
        lRttiField := lOneFieldRtti.FFieldRtti;
        lRttiProperty := lOneFieldRtti.FPropertyRtti;
        lFieldName := lOneFieldRtti.FDBFieldName;
        if lDataFields.TryGetValue(lFieldName, lField) then
        begin
          if lRttiField <> nil then
          begin
            lTypeKind := lRttiField.FieldType.TypeKind;
          end
          else if lRttiProperty <> nil then
          begin
            if not lRttiProperty.IsWritable then
              continue;
            lTypeKind := lRttiProperty.PropertyType.TypeKind;
          end;
          case lTypeKind of
            tkString, tkLString, tkUString:
              begin
                case lField.DataType of
                  ftString:
                    begin
                      if lOneFieldRtti.FIsProperty then
                        lRttiProperty.SetValue(TObject(lTempT), lField.AsString)
                      else
                        lRttiField.SetValue(TObject(lTempT), lField.AsString);
                    end;
                  ftBlob, ftGraphic, ftTypedBinary:
                    begin
                      tempStr := TNetEncoding.Base64.EncodeBytesToString(lField.AsBytes);
                      if lOneFieldRtti.FIsProperty then
                        lRttiProperty.SetValue(TObject(lTempT), tempStr)
                      else
                        lRttiField.SetValue(TObject(lTempT), tempStr);
                    end;
                else
                  begin
                    if lOneFieldRtti.FIsProperty then
                      lRttiProperty.SetValue(TObject(lTempT), lField.AsString)
                    else
                      lRttiField.SetValue(TObject(lTempT), lField.AsString);
                  end;
                end;
              end;
            tkWString:
              begin
                if lOneFieldRtti.FIsProperty then
                  lRttiProperty.SetValue(TObject(lTempT), lField.AsWideString)
                else
                  lRttiField.SetValue(TObject(lTempT), lField.AsWideString);
              end;
            tkInteger:
              begin
                case lField.DataType of
                  ftSmallint, ftInteger, ftWord, ftAutoInc, ftLongWord, ftShortint, ftByte:
                    begin
                      if lOneFieldRtti.FIsProperty then
                        lRttiProperty.SetValue(TObject(lTempT), lField.AsInteger)
                      else
                        lRttiField.SetValue(TObject(lTempT), lField.AsInteger);
                    end;
                else
                  begin

                  end;
                end;
              end;
            tkInt64:
              begin
                case lField.DataType of
                  ftLargeint:
                    begin
                      if lOneFieldRtti.FIsProperty then
                        lRttiProperty.SetValue(TObject(lTempT), lField.AsLargeInt)
                      else
                        lRttiField.SetValue(TObject(lTempT), lField.AsLargeInt);
                    end;
                  ftSmallint, ftInteger, ftWord, ftAutoInc, ftLongWord, ftShortint, ftByte:
                    begin
                      if lOneFieldRtti.FIsProperty then
                        lRttiProperty.SetValue(TObject(lTempT), lField.AsInteger)
                      else
                        lRttiField.SetValue(TObject(lTempT), lField.AsInteger);
                    end;
                else
                  begin

                  end;
                end;
              end;
            tkFloat:
              begin
                case lField.DataType of
                  ftFloat, ftBCD, ftFMTBcd:
                    begin
                      if lOneFieldRtti.FIsProperty then
                        lRttiProperty.SetValue(TObject(lTempT), lField.AsFloat)
                      else
                        lRttiField.SetValue(TObject(lTempT), lField.AsFloat);
                    end;
                  ftLargeint:
                    begin
                      if lOneFieldRtti.FIsProperty then
                        lRttiProperty.SetValue(TObject(lTempT), lField.AsLargeInt)
                      else
                        lRttiField.SetValue(TObject(lTempT), lField.AsLargeInt);
                    end;
                  ftSmallint, ftInteger, ftWord, ftAutoInc, ftLongWord, ftShortint, ftByte:
                    begin
                      if lOneFieldRtti.FIsProperty then
                        lRttiProperty.SetValue(TObject(lTempT), lField.AsInteger)
                      else
                        lRttiField.SetValue(TObject(lTempT), lField.AsInteger);
                    end;
                  ftTimeStamp:
                    begin
                      if lOneFieldRtti.FIsProperty then
                        lRttiProperty.SetValue(TObject(lTempT), lField.AsDateTime)
                      else
                        lRttiField.SetValue(TObject(lTempT), lField.AsDateTime);
                    end;
                else
                  begin

                  end;
                end;
              end;
            tkEnumeration:
              begin
                if lOneFieldRtti.FIsBool then
                begin
                  case lField.DataType of
                    ftBoolean:
                      begin
                        if lOneFieldRtti.FIsProperty then
                          lRttiProperty.SetValue(TObject(lTempT), lField.AsBoolean)
                        else
                          lRttiField.SetValue(TObject(lTempT), lField.AsBoolean);
                      end;
                    ftString:
                      begin
                        if lField.AsString.ToLower = 'true' then
                        begin
                          if lOneFieldRtti.FIsProperty then
                            lRttiProperty.SetValue(TObject(lTempT), True)
                          else
                            lRttiField.SetValue(TObject(lTempT), True);
                        end
                        else
                        begin
                          if lOneFieldRtti.FIsProperty then
                            lRttiProperty.SetValue(TObject(lTempT), false)
                          else
                            lRttiField.SetValue(TObject(lTempT), false);
                        end;
                      end;
                    ftSmallint, ftInteger, ftWord, ftAutoInc, ftLongWord, ftShortint, ftByte:
                      begin
                        if lField.AsInteger = 1 then
                        begin
                          if lOneFieldRtti.FIsProperty then
                            lRttiProperty.SetValue(TObject(lTempT), True)
                          else
                            lRttiField.SetValue(TObject(lTempT), True);
                        end
                        else
                        begin
                          if lOneFieldRtti.FIsProperty then
                            lRttiProperty.SetValue(TObject(lTempT), false)
                          else
                            lRttiField.SetValue(TObject(lTempT), false);
                        end;
                      end;
                  end;
                end
                else
                begin
                  // 枚举型
                  case lField.DataType of
                    ftSmallint, ftInteger:
                      begin
                        if lOneFieldRtti.FIsProperty then
                          lRttiProperty.SetValue(TObject(lTempT), lField.AsInteger)
                        else
                          lRttiField.SetValue(TObject(lTempT), lField.AsInteger);
                      end;
                    ftString:
                      begin
                        if lOneFieldRtti.FIsProperty then
                          lRttiProperty.SetValue(TObject(lTempT), GetEnumValue(lRttiProperty.PropertyType.Handle, lField.AsString))
                        else
                          lRttiField.SetValue(TObject(lTempT), GetEnumValue(lRttiField.FieldType.Handle, lField.AsString));
                      end;
                  end;
                end;
              end;
            tkVariant:
              begin
                if lOneFieldRtti.FIsProperty then
                  lRttiProperty.SetValue(TObject(lTempT), VarToStr(lField.AsVariant))
                else
                  lRttiField.SetValue(TObject(lTempT), VarToStr(lField.AsVariant));
              end;
          end;
        end;
      end;
      QDataSet.Next;
    end;
  finally
    lDataFields.Clear;
    lDataFields.Free;
  end;
end;

end.
